import { AuthService } from './auth';
import type {
  LessonPlan,
  LessonTemplate,
  Topic,
  LessonPlanCreateRequest,
  LessonPlanUpdateRequest,
  LessonTemplateCreateRequest,
  TopicCreateRequest,
  LessonPlanFilters,
  TemplateFilters,
  LessonPlanResponse,
  TemplateResponse,
  TopicResponse,
  SubjectType,
  GradeLevel,
  LessonStatus
} from '@/types/lesson';

export class LessonService {
  private static baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

  // Helper method ƒë·ªÉ t·∫°o headers v·ªõi authorization - B·∫ÆT BU·ªòC cho m·ªçi lesson plan API
  private static getAuthHeaders(): Record<string, string> {
    const token = AuthService.getAccessToken();
    if (!token) {
      throw new Error('Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    }
    
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    };
  }

  // Helper method cho public endpoints (ch·ªâ d√†nh cho m·∫´u c√¥ng khai)
  private static getPublicHeaders(): Record<string, string> {
    return {
      'Content-Type': 'application/json',
    };
  }

  // Helper method ƒë·ªÉ check quy·ªÅn truy c·∫≠p
  private static checkAuthentication(): void {
    if (!AuthService.isAuthenticated()) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.');
    }
  }

  // ================== LESSON PLANS ==================

  // GET /api/v1/giao-an - Danh s√°ch gi√°o √°n c·ªßa gi√°o vi√™n (CH·ªà C·ª¶A M√åNH - ISOLATION)
  static async getLessonPlans(filters?: LessonPlanFilters): Promise<LessonPlanResponse> {
    try {
      // KI·ªÇM TRA X√ÅC TH·ª∞C B·∫ÆT BU·ªòC
      this.checkAuthentication();

      // Build query params theo ƒë√∫ng API spec
      const params = new URLSearchParams();
      if (filters?.keyword) params.append('keyword', filters.keyword);
      if (filters?.monHoc) params.append('monHoc', filters.monHoc);
      if (filters?.khoi) params.append('khoi', filters.khoi.toString());
      if (filters?.trangThai) params.append('trangThai', filters.trangThai);
      if (filters?.chuDeId) params.append('chuDeId', filters.chuDeId.toString());

      const url = `${this.baseUrl}/api/v1/giao-an${params.toString() ? `?${params.toString()}` : ''}`;
      
      console.log('Fetching lesson plans:', { url, filters });
      
      const response = await fetch(url, {
        method: 'GET',
        headers: this.getAuthHeaders(), // B·∫ÆT BU·ªòC c√≥ token
      });

      const result = await response.json();
      
      console.log('üìã Lesson plans response:', { status: response.status, result });
      
      // KI·ªÇM TRA RESPONSE THEO CHU·∫®N API
      if (response.ok && result.thanhCong) {
        // API tr·∫£ v·ªÅ danh s√°ch gi√°o √°n c·ªßa user hi·ªán t·∫°i (ƒë√£ ƒë∆∞·ª£c l·ªçc isolation ·ªü backend)
        return {
          thanhCong: true,
          thongDiep: result.thongDiep || 'T·∫£i danh s√°ch gi√°o √°n th√†nh c√¥ng',
          duLieu: result.duLieu || []
        };
      } else {
        console.error('‚ùå API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch gi√°o √°n',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('üí• Error fetching lesson plans:', error);
      
      // N·∫øu l·ªói authentication, redirect v·ªÅ login
      if (error instanceof Error && error.message.includes('token')) {
        AuthService.clearTokens();
        window.location.href = '/login';
      }
      
      return {
        thanhCong: false,
        thongDiep: error instanceof Error ? error.message : 'L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch gi√°o √°n',
        duLieu: []
      };
    }
  }

  // GET /api/v1/giao-an/{id} - Chi ti·∫øt gi√°o √°n
  static async getLessonPlan(id: number): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/${id}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt gi√°o √°n',
        };
      }
    } catch (error) {
      console.error('Error fetching lesson plan:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫£i chi ti·∫øt gi√°o √°n',
      };
    }
  }

  // POST /api/v1/giao-an - T·∫°o gi√°o √°n th·ªß c√¥ng
  static async createLessonPlan(data: LessonPlanCreateRequest): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫°o gi√°o √°n',
        };
      }
    } catch (error) {
      console.error('Error creating lesson plan:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫°o gi√°o √°n',
      };
    }
  }

  // POST /api/v1/giao-an/tu-mau/{templateId} - T·∫°o gi√°o √°n t·ª´ m·∫´u (SNAPSHOT)
  static async createLessonPlanFromTemplate(templateId: number, data: any): Promise<LessonPlanResponse> {
    try {
      // KI·ªÇM TRA X√ÅC TH·ª∞C B·∫ÆT BU·ªòC
      this.checkAuthentication();

      console.log('üìã Creating lesson plan from template:', { templateId, data });

      // Prepare payload theo ƒë√∫ng API spec (PascalCase)
      const payload = {
        TieuDe: data.TieuDe || data.tieuDe,
        MucTieu: data.MucTieu || data.mucTieu || '',
        Khoi: data.Khoi || data.khoi,
        MonHoc: data.MonHoc || data.monHoc || 1, // 1 = HOA_HOC
        ThoiLuongTiet: data.ThoiLuongTiet || data.thoiLuongTiet || 1,
        LopHoc: data.LopHoc || data.lopHoc || '',
        GhiChu: data.GhiChu || data.ghiChu || '',
        SuDungAI: data.SuDungAI || data.suDungAI || false,
        YeuCauDacBiet: data.YeuCauDacBiet || data.yeuCauDacBiet || '',
        ChuDeId: data.ChuDeId || data.chuDeId || null
        // KH√îNG G·ª¨I NoiDungChiTiet v√¨ s·∫Ω l·∫•y t·ª´ m·∫´u (snapshot)
      };

      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/tu-mau/${templateId}`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(payload),
      });

      const result = await response.json();
      
      console.log('‚úÖ Template to lesson response:', { status: response.status, result });
      
      if (response.ok && result.thanhCong) {
        // Gi√°o √°n ƒë∆∞·ª£c t·∫°o v·ªõi status="DRAFT" v√† n·ªôi dung ƒë∆∞·ª£c snapshot t·ª´ m·∫´u
        return {
          thanhCong: true,
          thongDiep: result.thongDiep || 'T·∫°o gi√°o √°n t·ª´ m·∫´u th√†nh c√¥ng',
          duLieu: result.duLieu
        };
      } else {
        console.error('‚ùå API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫°o gi√°o √°n t·ª´ m·∫´u',
        };
      }
    } catch (error) {
      console.error('üí• Error creating lesson plan from template:', error);
      
      if (error instanceof Error && error.message.includes('token')) {
        AuthService.clearTokens();
        window.location.href = '/login';
      }
      
      return {
        thanhCong: false,
        thongDiep: error instanceof Error ? error.message : 'L·ªói k·∫øt n·ªëi khi t·∫°o gi√°o √°n t·ª´ m·∫´u',
      };
    }
  }

  // PUT /api/v1/giao-an/{id} - C·∫≠p nh·∫≠t gi√°o √°n
  static async updateLessonPlan(data: LessonPlanUpdateRequest): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/${data.id}`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi√°o √°n',
        };
      }
    } catch (error) {
      console.error('Error updating lesson plan:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi c·∫≠p nh·∫≠t gi√°o √°n',
      };
    }
  }

  // DELETE /api/v1/giao-an/{id} - X√≥a gi√°o √°n
  static async deleteLessonPlan(id: number): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/${id}`, {
        method: 'DELETE',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ x√≥a gi√°o √°n',
        };
      }
    } catch (error) {
      console.error('Error deleting lesson plan:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi x√≥a gi√°o √°n',
      };
    }
  }

  // POST /api/v1/giao-an/{id}/copy - Sao ch√©p gi√°o √°n
  static async copyLessonPlan(id: number): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/${id}/copy`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ sao ch√©p gi√°o √°n',
        };
      }
    } catch (error) {
      console.error('Error copying lesson plan:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi sao ch√©p gi√°o √°n',
      };
    }
  }

  // POST /api/v1/giao-an/{id}/phe-duyet - Ph√™ duy·ªát gi√°o √°n (DRAFT ‚Üí COMPLETED)
  static async approveLessonPlan(id: number): Promise<LessonPlanResponse> {
    return this.transitionStatus(id, 'phe-duyet');
  }

  // POST /api/v1/giao-an/{id}/xuat-ban - Xu·∫•t b·∫£n gi√°o √°n (COMPLETED ‚Üí PUBLISHED)
  static async publishLessonPlan(id: number): Promise<LessonPlanResponse> {
    return this.transitionStatus(id, 'xuat-ban');
  }

  // POST /api/v1/giao-an/{id}/luu-tru - L∆∞u tr·ªØ gi√°o √°n (PUBLISHED ‚Üí ARCHIVED)
  static async archiveLessonPlan(id: number): Promise<LessonPlanResponse> {
    return this.transitionStatus(id, 'luu-tru');
  }

  // Helper method for status transitions
  private static async transitionStatus(id: number, action: string): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/${id}/${action}`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || `Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông ${action}`,
        };
      }
    } catch (error) {
      console.error(`Error transitioning status (${action}):`, error);
      return {
        thanhCong: false,
        thongDiep: `L·ªói k·∫øt n·ªëi khi th·ª±c hi·ªán h√†nh ƒë·ªông ${action}`,
      };
    }
  }

  // GET /api/v1/giao-an/tim-kiem?keyword=... - T√¨m ki·∫øm gi√°o √°n
  static async searchLessonPlans(keyword: string): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/tim-kiem?keyword=${encodeURIComponent(keyword)}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t√¨m ki·∫øm gi√°o √°n',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error searching lesson plans:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t√¨m ki·∫øm gi√°o √°n',
        duLieu: []
      };
    }
  }

  // GET /api/v1/giao-an/loc-theo-chu-de/{chuDeId} - L·ªçc gi√°o √°n theo ch·ªß ƒë·ªÅ
  static async filterByTopic(topicId: number): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/loc-theo-chu-de/${topicId}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ l·ªçc gi√°o √°n theo ch·ªß ƒë·ªÅ',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error filtering lesson plans by topic:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi l·ªçc gi√°o √°n theo ch·ªß ƒë·ªÅ',
        duLieu: []
      };
    }
  }

  // GET /api/v1/giao-an/loc-theo-mon/{monHoc} - L·ªçc gi√°o √°n theo m√¥n h·ªçc
  static async filterBySubject(subject: SubjectType): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/loc-theo-mon/${subject}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ l·ªçc gi√°o √°n theo m√¥n h·ªçc',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error filtering lesson plans by subject:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi l·ªçc gi√°o √°n theo m√¥n h·ªçc',
        duLieu: []
      };
    }
  }

  // GET /api/v1/giao-an/loc-theo-khoi/{khoi} - L·ªçc gi√°o √°n theo kh·ªëi
  static async filterByGrade(grade: GradeLevel): Promise<LessonPlanResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/giao-an/loc-theo-khoi/${grade}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ l·ªçc gi√°o √°n theo kh·ªëi',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error filtering lesson plans by grade:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi l·ªçc gi√°o √°n theo kh·ªëi',
        duLieu: []
      };
    }
  }

  // ================== TEMPLATES ==================

  // GET /api/v1/mau-giao-an/cong-khai - Danh s√°ch m·∫´u c√¥ng khai
  static async getPublicTemplates(filters?: TemplateFilters): Promise<TemplateResponse> {
    try {
      const params = new URLSearchParams();
      if (filters?.keyword) params.append('keyword', filters.keyword);
      if (filters?.monHoc) params.append('monHoc', filters.monHoc);
      if (filters?.khoi) params.append('khoi', filters.khoi.toString());
      if (filters?.page) params.append('page', filters.page.toString());
      if (filters?.limit) params.append('limit', filters.limit.toString());

      const url = `${this.baseUrl}/api/v1/mau-giao-an/cong-khai${params.toString() ? `?${params.toString()}` : ''}`;
      const response = await fetch(url, {
        method: 'GET',
        headers: this.getPublicHeaders(), // Kh√¥ng c·∫ßn auth
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch m·∫´u c√¥ng khai',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error fetching public templates:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch m·∫´u c√¥ng khai',
        duLieu: []
      };
    }
  }

  // GET /api/v1/mau-giao-an/cua-toi - Danh s√°ch m·∫´u c·ªßa t√¥i
  static async getMyTemplates(filters?: TemplateFilters): Promise<TemplateResponse> {
    try {
      const params = new URLSearchParams();
      if (filters?.keyword) params.append('keyword', filters.keyword);
      if (filters?.monHoc) params.append('monHoc', filters.monHoc);
      if (filters?.khoi) params.append('khoi', filters.khoi.toString());
      if (filters?.page) params.append('page', filters.page.toString());
      if (filters?.limit) params.append('limit', filters.limit.toString());

      const url = `${this.baseUrl}/api/v1/mau-giao-an/cua-toi${params.toString() ? `?${params.toString()}` : ''}`;
      const response = await fetch(url, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch m·∫´u c·ªßa t√¥i',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error fetching my templates:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch m·∫´u c·ªßa t√¥i',
        duLieu: []
      };
    }
  }

  // GET /api/v1/mau-giao-an/{id} - Chi ti·∫øt m·∫´u
  static async getTemplate(id: number): Promise<TemplateResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/mau-giao-an/${id}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt m·∫´u',
        };
      }
    } catch (error) {
      console.error('Error fetching template:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫£i chi ti·∫øt m·∫´u',
      };
    }
  }

  // POST /api/v1/mau-giao-an - T·∫°o m·∫´u m·ªõi
  static async createTemplate(data: LessonTemplateCreateRequest): Promise<TemplateResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/mau-giao-an`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫°o m·∫´u',
        };
      }
    } catch (error) {
      console.error('Error creating template:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫°o m·∫´u',
      };
    }
  }

  // PUT /api/v1/mau-giao-an/{id} - C·∫≠p nh·∫≠t m·∫´u
  static async updateTemplate(data: any): Promise<TemplateResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/mau-giao-an/${data.id}`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫´u',
        };
      }
    } catch (error) {
      console.error('Error updating template:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi c·∫≠p nh·∫≠t m·∫´u',
      };
    }
  }

  // DELETE /api/v1/mau-giao-an/{id} - X√≥a m·∫´u
  static async deleteTemplate(id: number): Promise<TemplateResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/mau-giao-an/${id}`, {
        method: 'DELETE',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ x√≥a m·∫´u',
        };
      }
    } catch (error) {
      console.error('Error deleting template:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi x√≥a m·∫´u',
      };
    }
  }

  // POST /api/v1/mau-giao-an/{id}/chia-se - Chia s·∫ª/h·ªßy chia s·∫ª m·∫´u
  static async toggleTemplateSharing(id: number, share: boolean): Promise<TemplateResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/mau-giao-an/${id}/chia-se?chiaSe=${share}`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || `Kh√¥ng th·ªÉ ${share ? 'chia s·∫ª' : 'h·ªßy chia s·∫ª'} m·∫´u`,
        };
      }
    } catch (error) {
      console.error('Error toggling template sharing:', error);
      return {
        thanhCong: false,
        thongDiep: `L·ªói k·∫øt n·ªëi khi ${share ? 'chia s·∫ª' : 'h·ªßy chia s·∫ª'} m·∫´u`,
      };
    }
  }

  // ================== TOPICS ==================

  // GET /api/v1/chu-de - Danh s√°ch ch·ªß ƒë·ªÅ
  static async getTopics(): Promise<TopicResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/chu-de`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ªß ƒë·ªÅ',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error fetching topics:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch ch·ªß ƒë·ªÅ',
        duLieu: []
      };
    }
  }

  // GET /api/v1/chu-de/theo-mon/{monHoc} - L·ªçc ch·ªß ƒë·ªÅ theo m√¥n h·ªçc
  static async getTopicsBySubject(subject: SubjectType): Promise<TopicResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/chu-de/theo-mon/${subject}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ªß ƒë·ªÅ theo m√¥n h·ªçc',
          duLieu: []
        };
      }
    } catch (error) {
      console.error('Error fetching topics by subject:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch ch·ªß ƒë·ªÅ theo m√¥n h·ªçc',
        duLieu: []
      };
    }
  }

  // POST /api/v1/chu-de - T·∫°o ch·ªß ƒë·ªÅ m·ªõi
  static async createTopic(data: TopicCreateRequest): Promise<TopicResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/chu-de`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data),
      });

      const result = await response.json();
      
      if (response.ok && result.thanhCong) {
        return result;
      } else {
        console.error('API error:', result);
        return {
          thanhCong: false,
          thongDiep: result.thongDiep || 'Kh√¥ng th·ªÉ t·∫°o ch·ªß ƒë·ªÅ',
        };
      }
    } catch (error) {
      console.error('Error creating topic:', error);
      return {
        thanhCong: false,
        thongDiep: 'L·ªói k·∫øt n·ªëi khi t·∫°o ch·ªß ƒë·ªÅ',
      };
    }
  }
}